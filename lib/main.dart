import 'dart:math';
import 'package:flutter/material.dart';
import 'package:flutter_localizations/flutter_localizations.dart';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é MyApp (–¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã –∏ —è–∑—ã–∫–∞)
final GlobalKey<_MyAppState> myAppKey = GlobalKey<_MyAppState>();

void main() {
  runApp(MyApp(key: myAppKey));
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});
  
  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  // –ù–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  ThemeMode _themeMode = ThemeMode.system;
  Locale _locale = const Locale('kk');
  
  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã: –µ—Å–ª–∏ —Å–≤–µ—Ç–ª–∞—è, —Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –∑–µ–ª—ë–Ω—É—é —Ç–µ–º—É, –∏–Ω–∞—á–µ ‚Äì –Ω–∞ –±–µ–ª—É—é
  void toggleTheme() {
    setState(() {
      if (_themeMode == ThemeMode.light) {
        _themeMode = ThemeMode.dark;
      } else {
        _themeMode = ThemeMode.light;
      }
    });
  }
  
  // –¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤: kk -> ru -> en -> kk...
  void cycleLocale() {
    final locales = const [Locale('kk'), Locale('ru'), Locale('en')];
    int currentIndex = locales.indexWhere((l) => l.languageCode == _locale.languageCode);
    int nextIndex = (currentIndex + 1) % locales.length;
    setState(() {
      _locale = locales[nextIndex];
    });
  }
  
  @override
  Widget build(BuildContext context) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—à—É —Å–≤–µ—Ç–ª—É—é –∏ "–∑–µ–ª—ë–Ω—É—é" —Ç—ë–º–Ω—É—é —Ç–µ–º—É
    final ThemeData lightTheme = ThemeData(
      brightness: Brightness.light,
      scaffoldBackgroundColor: Colors.white,
      appBarTheme: const AppBarTheme(
        backgroundColor: Colors.white,
        foregroundColor: Colors.black,
      ),
    );
    
    final ThemeData greenDarkTheme = ThemeData(
      brightness: Brightness.dark,
      scaffoldBackgroundColor: Colors.green[800],
      appBarTheme: AppBarTheme(
        backgroundColor: Colors.green[700],
        foregroundColor: Colors.white,
      ),
      primarySwatch: Colors.green,
    );
    
    return MaterialApp(
      title: 'Flutter Blackjack',
      theme: lightTheme,
      darkTheme: greenDarkTheme,
      themeMode: _themeMode,
      locale: _locale,
      supportedLocales: const [
        Locale('en'),
        Locale('ru'),
        Locale('kk'),
      ],
      localizationsDelegates: [
        const AppLocalizationsDelegate(),
        ...GlobalMaterialLocalizations.delegates,
      ],
      localeResolutionCallback: (locale, supportedLocales) {
        if (locale == null) return const Locale('kk');
        for (var supportedLocale in supportedLocales) {
          if (supportedLocale.languageCode == locale.languageCode) {
            return supportedLocale;
          }
        }
        return const Locale('kk');
      },
      home: const MainScreen(),
    );
  }
}

class MainScreen extends StatefulWidget {
  const MainScreen({super.key});
  
  @override
  State<MainScreen> createState() => _MainScreenState();
}

class _MainScreenState extends State<MainScreen> {
  int _selectedIndex = 0;
  
  static final List<Widget> _pages = [
    const BlackjackScreen(),
    const AboutPage(),
  ];
  
  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }
  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: _pages[_selectedIndex],
      bottomNavigationBar: BottomNavigationBar(
        items: const [
          BottomNavigationBarItem(icon: Icon(Icons.casino), label: 'Play'),
          BottomNavigationBarItem(icon: Icon(Icons.info), label: 'About'),
        ],
        currentIndex: _selectedIndex,
        selectedItemColor: Colors.blueAccent,
        onTap: _onItemTapped,
      ),
    );
  }
}

/// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–≥—Ä—ã, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–∞—è —Ä–∞–±–æ—Ç—É –∂–µ—Å—Ç–æ–≤, –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π UI –∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏.
class BlackjackScreen extends StatefulWidget {
  const BlackjackScreen({super.key});
  
  @override
  State<BlackjackScreen> createState() => _BlackjackScreenState();
}

class _BlackjackScreenState extends State<BlackjackScreen> {
  List<String> playerCards = ['üÇ°', 'üÇ±'];
  List<String> dealerCards = ['üÇ†', 'üÇ°'];
  String statusText = '';
  
  Map<int, bool> cardFlipped = {};
  
  final Random rnd = Random();
  final List<String> cardFaces = ['üÇ°', 'üÇ±', 'üÉÅ', 'üÉë', 'üÇÆ', 'üÇ≠'];
  
  @override
  Widget build(BuildContext context) {
    // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    final loc = AppLocalizations.of(context)!;
    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if (statusText.isEmpty) {
      statusText = loc.yourTurn;
    }
    
    return Scaffold(
      appBar: AppBar(
        title: Text(loc.blackjackTable),
        actions: [
          // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
          IconButton(
            icon: const Icon(Icons.brightness_6),
            onPressed: () {
              myAppKey.currentState?.toggleTheme();
            },
          ),
          // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞
          IconButton(
            icon: const Icon(Icons.language),
            onPressed: () {
              myAppKey.currentState?.cycleLocale();
            },
          ),
        ],
      ),
      body: OrientationBuilder(
        builder: (context, orientation) {
          final isPortrait = orientation == Orientation.portrait;
          final layout = _buildGameLayout(isPortrait, loc);
          return SingleChildScrollView(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: isPortrait
                  ? Column(
                      crossAxisAlignment: CrossAxisAlignment.stretch,
                      children: layout,
                    )
                  : Column(
                      children: [
                        Row(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Expanded(
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.stretch,
                                children: [
                                  layout[0], // –ë–ª–æ–∫ –¥–∏–ª–µ—Ä–∞
                                  const SizedBox(height: 20),
                                  layout[1], // –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
                                ],
                              ),
                            ),
                            const SizedBox(width: 20),
                            Expanded(
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.stretch,
                                children: [
                                  layout[2], // –ë–ª–æ–∫ –∏–≥—Ä–æ–∫–∞
                                ],
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 30),
                        layout[3], // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                      ],
                    ),
            ),
          );
        },
      ),
    );
  }
  
  List<Widget> _buildGameLayout(bool isPortrait, AppLocalizations loc) {
    // –†—è–¥ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–∏–ª–µ—Ä–∞ —Å –∂–µ—Å—Ç–æ–º onTap –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π —Å–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏.
    Widget dealerCardsRow = Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: dealerCards.asMap().entries.map((entry) {
        int idx = entry.key;
        String card = entry.value;
        return Padding(
          padding: const EdgeInsets.symmetric(horizontal: 5),
          child: GestureDetector(
            onTap: () {
              setState(() {
                dealerCards[idx] = cardFaces[rnd.nextInt(cardFaces.length)];
              });
            },
            child: CardWidget(cardText: card),
          ),
        );
      }).toList(),
    );
    
    // –†—è–¥ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–≥—Ä–æ–∫–∞ —Å –∂–µ—Å—Ç–∞–º–∏: onTap (–ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É) –∏ onLongPress (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç SnackBar).
    Widget playerCardsRow = Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: playerCards.asMap().entries.map((entry) {
        int idx = entry.key;
        String card = entry.value;
        bool flipped = cardFlipped[idx] ?? false;
        return Padding(
          padding: const EdgeInsets.symmetric(horizontal: 5),
          child: GestureDetector(
            onTap: () {
              setState(() {
                cardFlipped[idx] = !flipped;
                if (cardFlipped[idx] == true) {
                  playerCards[idx] = cardFaces[rnd.nextInt(cardFaces.length)];
                } else {
                  playerCards[idx] = 'üÇ°';
                }
              });
            },
            onLongPress: () {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(content: Text('Card ${idx + 1} long pressed!')),
              );
            },
            child: CardWidget(cardText: card),
          ),
        );
      }).toList(),
    );
    
    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å —Å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
    Widget controls = Padding(
      padding: const EdgeInsets.symmetric(vertical: 10),
      child: Wrap(
        spacing: 10,
        alignment: WrapAlignment.center,
        children: [
          ElevatedButton(
            onPressed: () {
              setState(() {
                playerCards.add(cardFaces[rnd.nextInt(cardFaces.length)]);
                cardFlipped[playerCards.length - 1] = false;
                statusText = '${loc.hit}! ${loc.cardAdded}';
              });
            },
            child: Text(loc.hit),
          ),
          ElevatedButton(
            onPressed: () {
              setState(() {
                statusText = loc.standMessage;
              });
            },
            child: Text(loc.stand),
          ),
          ElevatedButton(
            onPressed: () {
              setState(() {
                statusText = loc.doubleMessage;
              });
            },
            child: Text(loc.doubleAction),
          ),
          ElevatedButton(
            onPressed: () {
              setState(() {
                playerCards = ['üÇ°', 'üÇ±'];
                dealerCards = ['üÇ†', 'üÇ°'];
                cardFlipped.clear();
                statusText = loc.gameRestarted;
              });
            },
            child: Text(loc.restart),
          ),
        ],
      ),
    );
    
    // –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã.
    Widget statusBar = Center(
      child: Text(
        statusText,
        style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
      ),
    );
    
    return [
      ExpandedSection(title: loc.blackjackTable, child: dealerCardsRow),
      statusBar,
      ExpandedSection(title: loc.blackjackTable, child: playerCardsRow),
      controls,
    ];
  }
}

/// –í–∏–¥–∂–µ—Ç, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –∏–≥—Ä–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É.
class CardWidget extends StatelessWidget {
  final String cardText;
  const CardWidget({super.key, required this.cardText});
  
  @override
  Widget build(BuildContext context) {
    return Container(
      width: 60,
      height: 90,
      decoration: BoxDecoration(
        color: Colors.white,
        border: Border.all(color: Colors.black),
        borderRadius: BorderRadius.circular(8),
        boxShadow: const [BoxShadow(color: Colors.grey, blurRadius: 4)],
      ),
      alignment: Alignment.center,
      child: Text(
        cardText,
        style: const TextStyle(fontSize: 32),
      ),
    );
  }
}

/// –í–∏–¥–∂–µ—Ç –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–µ–∫—Ü–∏–π —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º.
class ExpandedSection extends StatelessWidget {
  final String title;
  final Widget child;
  const ExpandedSection({super.key, required this.title, required this.child});
  
  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Text(title,
            style: const TextStyle(fontSize: 22, fontWeight: FontWeight.bold)),
        const SizedBox(height: 10),
        child,
      ],
    );
  }
}

/// –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–û –∏–≥—Ä–µ", —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π.
class AboutPage extends StatelessWidget {
  const AboutPage({super.key});
  
  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    return Scaffold(
      appBar: AppBar(
        title: Text(loc.aboutTheGame),
        actions: [
          IconButton(
            icon: const Icon(Icons.brightness_6),
            onPressed: () {
              myAppKey.currentState?.toggleTheme();
            },
          ),
          IconButton(
            icon: const Icon(Icons.language),
            onPressed: () {
              myAppKey.currentState?.cycleLocale();
            },
          ),
        ],
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              loc.flutterBlackjackGame,
              style: const TextStyle(
                  fontSize: 26,
                  fontWeight: FontWeight.bold,
                  color: Colors.blueAccent),
            ),
            const SizedBox(height: 10),
            Text(
              loc.thisIsBlackjack,
              style: const TextStyle(fontSize: 18),
            ),
            const SizedBox(height: 20),
            Text(
              loc.developers,
              style: const TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 5),
            const Text(
              '‚Ä¢ Daniil Naumenko\n‚Ä¢ Ramazan Abytaiev\n',
              style: TextStyle(fontSize: 18),
            ),
            const SizedBox(height: 20),
            Text(
              loc.mentor,
              style: const TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
            ),
            const Text(
              'Professor Abzal Kyzyrkanov',
              style: TextStyle(fontSize: 18),
            ),
            const SizedBox(height: 30),
            Center(
              child: Text(
                loc.enjoyYourGame,
                style: const TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                    color: Colors.green),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

/// –ö–ª–∞—Å—Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏: —Ö—Ä–∞–Ω–∏—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤.
class AppLocalizations {
  final Locale locale;
  AppLocalizations(this.locale);
  
  static AppLocalizations? of(BuildContext context) {
    return Localizations.of<AppLocalizations>(context, AppLocalizations);
  }
  
  static final Map<String, Map<String, String>> _localizedValues = {
    'en': {
      'blackjack_table': 'Blackjack Table',
      'your_turn': 'Your Turn!',
      'hit': 'Hit',
      'stand': 'Stand',
      'double': 'Double',
      'restart': 'Restart',
      'card_added': 'Card added.',
      'stand_message': 'Stand! Waiting...',
      'double_message': 'Double! Bet increased.',
      'game_restarted': 'Game restarted!',
      'about_the_game': 'About the Game',
      'flutter_blackjack_game': 'Flutter Blackjack Game',
      'this_is_blackjack': 'This is a simple Flutter-based Blackjack game where players can enjoy the classic card game experience.',
      'developers': 'Developers:',
      'mentor': 'Mentor:',
      'enjoy_your_game': 'Enjoy your game!',
    },
    'ru': {
      'blackjack_table': '–°—Ç–æ–ª –¥–ª—è –±–ª—ç–∫–¥–∂–µ–∫–∞',
      'your_turn': '–í–∞—à —Ö–æ–¥!',
      'hit': '–í–∑—è—Ç—å –∫–∞—Ä—Ç—É',
      'stand': '–û—Å—Ç–∞—Ç—å—Å—è',
      'double': '–£–¥–≤–æ–∏—Ç—å',
      'restart': '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ',
      'card_added': '–ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.',
      'stand_message': '–û—Å—Ç–∞—Ç—å—Å—è! –û–∂–∏–¥–∞–Ω–∏–µ...',
      'double_message': '–£–¥–≤–æ–∏—Ç—å! –°—Ç–∞–≤–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞.',
      'game_restarted': '–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞ –∑–∞–Ω–æ–≤–æ!',
      'about_the_game': '–û –∏–≥—Ä–µ',
      'flutter_blackjack_game': '–ò–≥—Ä–∞ –ë–ª—ç–∫–¥–∂–µ–∫ –Ω–∞ Flutter',
      'this_is_blackjack': '–≠—Ç–æ –ø—Ä–æ—Å—Ç–∞—è –∏–≥—Ä–∞ –ë–ª—ç–∫–¥–∂–µ–∫ –Ω–∞ Flutter, –≥–¥–µ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º –∏–≥—Ä–æ–≤—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º.',
      'developers': '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏:',
      'mentor': '–ù–∞—Å—Ç–∞–≤–Ω–∏–∫:',
      'enjoy_your_game': '–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!',
    },
    'kk': {
      'blackjack_table': '–ë–ª—ç–∫–¥–∂–µ–∫ “Ø—Å—Ç–µ–ª—ñ',
      'your_turn': '–°—ñ–∑–¥—ñ“£ –∫–µ–∑–µ–≥—ñ“£—ñ–∑!',
      'hit': '–ö–∞—Ä—Ç–∞ –∞–ª—É',
      'stand': '–ë–æ–ª–º–∞—É',
      'double': '“ö–æ—Å–∞—Ä–ª–∞—É',
      'restart': '“ö–∞–π—Ç–∞ –±–∞—Å—Ç–∞—É',
      'card_added': '–ö–∞—Ä—Ç–∞ “õ–æ—Å—ã–ª–¥—ã.',
      'stand_message': '–ë–æ–ª–º–∞—É! –ö“Ø—Ç—É...',
      'double_message': '“ö–æ—Å–∞—Ä–ª–∞—É! –°—Ç–∞–≤–∫–∞ –∞—Ä—Ç—Ç—ã.',
      'game_restarted': '–û–π—ã–Ω “õ–∞–π—Ç–∞ –±–∞—Å—Ç–∞–ª–¥—ã!',
      'about_the_game': '–û–π—ã–Ω —Ç—É—Ä–∞–ª—ã',
      'flutter_blackjack_game': 'Flutter –ë–ª—ç–∫–¥–∂–µ–∫ –æ–π—ã–Ω—ã',
      'this_is_blackjack': '–ë“±–ª “õ–∞—Ä–∞–ø–∞–π—ã–º Flutter –Ω–µ–≥—ñ–∑—ñ–Ω–¥–µ–≥—ñ –ë–ª—ç–∫–¥–∂–µ–∫ –æ–π—ã–Ω—ã, –º“±–Ω–¥–∞ –æ–π—ã–Ω—à—ã–ª–∞—Ä –∫–ª–∞—Å—Å–∏–∫–∞–ª—ã“õ –∫–∞—Ä—Ç–∞ –æ–π—ã–Ω—ã–Ω –æ–π–Ω–∞–π –∞–ª–∞–¥—ã.',
      'developers': '–î–∞–º—ã—Ç—É—à—ã–ª–∞—Ä:',
      'mentor': '–ú–µ–Ω—Ç–æ—Ä:',
      'enjoy_your_game': '–û–π—ã–Ω–¥—ã —Ä–∞“õ–∞—Ç—Ç–∞–Ω—ã“£—ã–∑!',
    },
  };
  
  String get blackjackTable => _localizedValues[locale.languageCode]?['blackjack_table'] ?? '';
  String get yourTurn => _localizedValues[locale.languageCode]?['your_turn'] ?? '';
  String get hit => _localizedValues[locale.languageCode]?['hit'] ?? '';
  String get stand => _localizedValues[locale.languageCode]?['stand'] ?? '';
  String get doubleAction => _localizedValues[locale.languageCode]?['double'] ?? '';
  String get restart => _localizedValues[locale.languageCode]?['restart'] ?? '';
  String get cardAdded => _localizedValues[locale.languageCode]?['card_added'] ?? '';
  String get standMessage => _localizedValues[locale.languageCode]?['stand_message'] ?? '';
  String get doubleMessage => _localizedValues[locale.languageCode]?['double_message'] ?? '';
  String get gameRestarted => _localizedValues[locale.languageCode]?['game_restarted'] ?? '';
  String get aboutTheGame => _localizedValues[locale.languageCode]?['about_the_game'] ?? '';
  String get flutterBlackjackGame => _localizedValues[locale.languageCode]?['flutter_blackjack_game'] ?? '';
  String get thisIsBlackjack => _localizedValues[locale.languageCode]?['this_is_blackjack'] ?? '';
  String get developers => _localizedValues[locale.languageCode]?['developers'] ?? '';
  String get mentor => _localizedValues[locale.languageCode]?['mentor'] ?? '';
  String get enjoyYourGame => _localizedValues[locale.languageCode]?['enjoy_your_game'] ?? '';
}

/// –î–µ–ª–µ–≥–∞—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è AppLocalizations.
class AppLocalizationsDelegate extends LocalizationsDelegate<AppLocalizations> {
  const AppLocalizationsDelegate();
  
  @override
  bool isSupported(Locale locale) => ['en', 'ru', 'kk'].contains(locale.languageCode);
  
  @override
  Future<AppLocalizations> load(Locale locale) async {
    return AppLocalizations(locale);
  }
  
  @override
  bool shouldReload(covariant LocalizationsDelegate<AppLocalizations> old) => false;
}
